# 分散型ソーシャルネットワークアプリケーション開発ルール

## プロジェクト概要
分散型ソーシャルネットワークアプリケーションのPhase 1（MVP）開発におけるAI支援ルール。
Tauri、iroh-gossip、Automergeなどの技術を使用して分散型のソーシャルネットワークを構築します。

## コーディング規約
- フロントエンドコードはTypescriptを使用し、厳格な型定義を行う
- コンポーネント設計は関心の分離原則に従う
- Rustコードはidomatic Rustスタイルに従う
- すべての関数には適切なドキュメントコメントを含める
- エラー処理は適切に行い、ユーザーフレンドリーなメッセージを提供する

## データモデル
- フロントエンドのすべてのデータモデルはZodを使用して定義
- バリデーションはZodスキーマで実装し、Automergeと競合しないように注意
- Rustモデルはserde互換とする
- すべてのデータ型はDocストリングを含むこと

## テスト要件
- すべてのコンポーネントには少なくとも基本的なテストが必要
- Rustコードは適切なユニットテストを含むこと
- E2Eテストはユーザーフローをカバーすること
- マルチデバイス間の同期テストが必要
- テストカバレッジは80%以上を目標とする

## 技術的考慮事項
- Automergeのパフォーマンスに注意し、ドキュメントの断片化を検討する
- iroh-gossipのトピック設計は効率的なメッセージ伝播を考慮する
- リソース使用量（メモリ、CPU、ネットワーク）の最適化を心がける
- オフライン対応を考慮したデータ同期設計を行う
- 秘密鍵などの機密データはセキュアに保存する

## UIガイドライン
- レスポンシブデザインを採用し、デスクトップアプリに適したUIを提供
- アクセシビリティを考慮したコンポーネント設計
- ダークモード対応を含む
- ローディング状態とエラー状態を適切に表示
- シンプルで直感的なユーザーエクスペリエンスを重視

## ドキュメント
- すべての主要なコンポーネントとモジュールには適切なドキュメントを添付
- APIの使用例を含む
- アーキテクチャと設計決定の根拠を文書化
- 詳細な実装手順を提供
- トラブルシューティングガイドを含める

## 開発プロセス
- 段階的な実装を行い、各ステップでの目標を明確にする
- 継続的インテグレーションのためのGitHub Actionsワークフローを提供
- 早期からのテスト駆動開発を実践
- コード品質を維持するための定期的なリファクタリングを推奨
- セキュリティを最優先し、ユーザーデータの保護に注力

## メモリバンク管理
- プロジェクトの進行に伴い、メモリバンクを定期的に更新する
- 特に `activeContext.md` と `progress.md` は最新の状態を維持する
- 新しい技術的発見や決定事項は適切に文書化する
- 実装中に発生した問題と解決策を記録する

## 学習と発見
このセクションは、プロジェクト進行中に学んだ重要な洞察や発見を記録します。

### Automerge関連
- まだ実装が始まっていないため、具体的な学習はありません

### iroh-gossip関連
- まだ実装が始まっていないため、具体的な学習はありません

### Tauri関連
- まだ実装が始まっていないため、具体的な学習はありません

### React/TypeScript関連
- まだ実装が始まっていないため、具体的な学習はありません

## 注意点と回避策
このセクションは、プロジェクト中に遭遇した問題とその回避策を記録します。

- まだ実装が始まっていないため、具体的な問題は発生していません